{"version":3,"sources":["components/Invisible.js","components/uploader/Uploader.js","components/visualizer/Visualizer.js","components/Template.js","index.js"],"names":["Invisible","props","react_default","a","createElement","Button","onClick","mesh","Uploader","_useState","useState","_useState2","Object","slicedToArray","file","setFile","console","log","type","onChange","e","target","files","build","url","width","height","modelColor","backgroundColor","rotate","orbitControls","Visualizer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleWindowResize","el","clientWidth","clientHeight","renderer","setSize","camera","aspect","updateProjectionMatrix","sceneSetup","raycaster","THREE","scene","controls","OrbitControls","position","z","appendChild","domElement","material","color","wireframe","STLLoader","load","state","path","geometry","objBbox","setFromObject","bboxCenter","getCenter","clone","multiplyScalar","traverse","child","translate","x","y","add","xhr","loaded","total","error","invisible","visible","setState","startAnimationLoop","render","requestID","window","requestAnimationFrame","addEventListener","mouse","clientX","innerWidth","clientY","innerHeight","setFromCamera","intersects","intersectObjects","children","i","length","setHex","_this2","Fragment","onMouseDownCapture","raycast","onMouseUp","style","ref","components_Invisible","uploader_Uploader","Component","Template","visualizer_Visualizer","ReactDOM","components_Template","document","getElementById"],"mappings":"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","file":"static/js/main.2aa5af26.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"reactstrap\";\n\nfunction Invisible(props) {\n  return <Button onClick={props.mesh}>Invisible</Button>;\n}\nexport default Invisible;\n","import React, { useState } from \"react\";\n//import STLViewer from \"react-stl-obj-viewer\";\nimport { STLViewer} from 'react-stl-obj-viewer';\n\nfunction Uploader() {\n  const [file, setFile] = useState(\"\");\n  console.log(file);\n  return (\n    <div>\n      <input type=\"file\" onChange={e => setFile(e.target.files)}></input>\n      <STLViewer\n        url=\"/home/jmichel/Documents/tesis/ThreeJS/public/test.stl\"\n        width={400}\n        height={400}\n        modelColor=\"#B92C2C\"\n        backgroundColor=\"#EAEAEA\"\n        rotate={true}\n        orbitControls={true}\n      />\n    </div>\n  );\n}\nexport default Uploader;\n","import * as THREE from \"three\";\nimport { STLLoader } from \"three/examples/jsm/loaders/STLLoader\";\nimport React, { Component } from \"react\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Invisible from \"../Invisible\";\nimport Uploader from \"../uploader/Uploader\";\n\nclass Visualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: true,\n      path: \"test.stl\"\n    };\n  }\n  componentDidMount() {\n    this.sceneSetup();\n    //this.addCustomSceneObjects();\n    this.startAnimationLoop();\n    window.addEventListener(\"resize\", this.handleWindowResize);\n  }\n  handleWindowResize = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n\n    this.renderer.setSize(width, height);\n    this.camera.aspect = width / height;\n    this.camera.updateProjectionMatrix();\n  };\n  sceneSetup = () => {\n    const width = this.el.clientWidth;\n    const height = this.el.clientHeight;\n    this.raycaster = new THREE.Raycaster();\n\n    this.scene = new THREE.Scene();\n\n    this.camera = new THREE.PerspectiveCamera(\n      75, // fov = field of view\n      width / height, // aspect ratio\n      0.1, // near plane\n      1000 // far plane\n    );\n\n    this.controls = new OrbitControls(this.camera, this.el);\n\n    // set some distance from a cube that is located at z = 0\n    this.camera.position.z = 85;\n\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setSize(width, height);\n    this.el.appendChild(this.renderer.domElement); // mount using React ref\n\n    /// ------ wiiiiii\n    this.material = new THREE.MeshBasicMaterial({\n      color: 0x00ff00,\n      wireframe: true\n    });\n    //const cube = new THREE.Mesh( geometry, material );\n    var loader = new STLLoader();\n\n    loader.load(\n      this.state.path,\n      geometry => {\n        this.mesh = new THREE.Mesh(geometry, this.material);\n        var objBbox = new THREE.Box3().setFromObject(this.mesh);\n        this.raycaster = new THREE.Raycaster();\n\n        console.log(objBbox);\n        var bboxCenter = objBbox.getCenter().clone();\n        bboxCenter.multiplyScalar(-1);\n\n        this.mesh.traverse(function(child) {\n          if (child instanceof THREE.Mesh) {\n            child.geometry.translate(bboxCenter.x, bboxCenter.y, bboxCenter.z);\n          }\n        });\n\n        objBbox.setFromObject(this.mesh);\n\n        this.scene.add(this.mesh);\n      },\n      // called when loading is in progresses\n      function(xhr) {\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      // called when loading has errors\n      function(error) {\n        console.log(\"An error : \", error);\n      }\n    );\n    //this.scene.add(cube);\n  };\n  raycast(e) {\n    this.mouse = { x: 0, y: 0 };\n    this.mouse.x = (e.clientX / window.innerWidth) * 2 - 1;\n    this.mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n    //console.log(this.mouse);\n    //2. set the picking ray from the camera position and mouse coordinates\n    this.raycaster.setFromCamera(this.mouse, this.camera);\n\n    //3. compute intersections\n    var intersects = this.raycaster.intersectObjects(this.scene.children);\n\n    for (var i = 0; i < intersects.length; i++) {\n      console.log(intersects[i]);\n      this.mesh.material.color.setHex(0xffff00);\n    }\n  }\n  invisible = () => {\n    this.mesh.visible = !this.state.visible;\n    console.log(this.mesh);\n    this.setState({ visible: this.mesh.visible });\n  };\n  startAnimationLoop = () => {\n    //console.log(\"what up!\")\n    this.renderer.render(this.scene, this.camera);\n    //this.renderer.render( this.scene, this.camera );\n    this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n  };\n  render() {\n    return (\n      <>\n        <div\n          onMouseDownCapture={e => this.raycast(e)}\n          onMouseUp={() => this.mesh.material.color.setHex(0x00ff00)}\n          style={{ height: \"500px\" }}\n          ref={ref => (this.el = ref)}\n        />\n        <Invisible mesh={this.invisible} />\n        <Uploader />\n      </>\n    );\n  }\n}\n\nexport default Visualizer;\n","import React from \"react\";\nimport Visualizer from \"./visualizer/Visualizer\";\n\nfunction Template() {\n  return <Visualizer />;\n}\n\nexport default Template;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Template from \"./components/Template\";\nReactDOM.render(<Template />, document.getElementById(\"root\"));"],"sourceRoot":""}